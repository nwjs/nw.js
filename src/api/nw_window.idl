// Copyright 2015 The NW.js Authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

// nw Window API
namespace nw.Window {
  callback CreateWindowCallback =
      void ([instanceOf=NWWindow] object createdWindow);
  callback EventCallback = void();

  callback CapturePageCallback = void (DOMString dataUrl);
  [noinline_doc] dictionary CapturePageOptions {
    [nodoc] DOMString? format;
    [nodoc] DOMString? datatype;
    [nodoc] long? quality;
  };
  [noinline_doc] dictionary CreateWindowOptions {
    [nodoc] long? x;
    [nodoc] long? y;
    [nodoc] long? width;
    [nodoc] long? height;
    [nodoc] long? min_width;
    [nodoc] long? min_height;
    [nodoc] long? max_width;
    [nodoc] long? max_height;
    [nodoc] boolean? frame;
    [nodoc] boolean? resizable;
    [nodoc] boolean? fullscreen;
    [nodoc] boolean? show;
    [nodoc] boolean? always_on_top;
    [nodoc] boolean? visible_on_all_workspaces;
  };

  [noinline_doc] dictionary NWWindow {
    // show devtools for the current window
    static void showDevTools();
    static void capturePage(optional CapturePageCallback callback, optional CapturePageOptions options);
    static void show();
    static void hide();
    static void focus();
    static void blur();
    static void close();
    static void minimize();
    static void maximize();
    static void unmaximize();
    static void restore();
    static void resizeTo(long width, long height);
    static void resizeBy(long width, long height);
    static void setMaximumSize(long width, long height);
    static void setMinimumSize(long width, long height);
    static void setResizable(boolean resizable);
    static void enterFullscreen();
    static void leaveFullscreen();
    static void toggleFullscreen();
    static void on(DOMString event,
                   EventCallback callback);

    static void eval(object frame, DOMString script);
    static void evalNWBin(object frame, DOMString path);

    object appWindow;
    object window;
    object menu;
    long x;
    long y;
  };
  interface Functions {
    // get the current window
    [nocompile] static NWWindow get();
    [nocompile] static void open(DOMString url,
                                 optional CreateWindowOptions options,
                                 optional CreateWindowCallback callback);

  };
  interface Events {
    [nocompile] static void onNewWinPolicy();
    [nocompile] static void onNavigation();
    [nocompile] static void LoadingStateChanged();
  };
};
